"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter
  ): TagsConnection

  """Reads and enables pagination through a set of `Todo`."""
  todos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodoFilter
  ): TodosConnection

  """Reads and enables pagination through a set of `TodosTag`."""
  todosTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodosTag`."""
    orderBy: [TodosTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodosTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodosTagFilter
  ): TodosTagsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection
  tag(id: UUID!): Tag
  todo(id: UUID!): Todo
  todosTag(id: UUID!): TodosTag
  user(id: UUID!): User

  """Example of function with sql"""
  searchTodo(
    search: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodoFilter
  ): TodosConnection

  """Reads a single `Tag` using its globally unique `ID`."""
  tagByNodeId(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    nodeId: ID!
  ): Tag

  """Reads a single `Todo` using its globally unique `ID`."""
  todoByNodeId(
    """The globally unique `ID` to be used in selecting a single `Todo`."""
    nodeId: ID!
  ): Todo

  """Reads a single `TodosTag` using its globally unique `ID`."""
  todosTagByNodeId(
    """The globally unique `ID` to be used in selecting a single `TodosTag`."""
    nodeId: ID!
  ): TodosTag

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """A list of `Tag` objects."""
  nodes: [Tag]!

  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

type Tag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!

  """Reads and enables pagination through a set of `TodosTag`."""
  todosTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodosTag`."""
    orderBy: [TodosTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodosTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodosTagFilter
  ): TodosTagsConnection!

  """Reads and enables pagination through a set of `Todo`."""
  todosByTodosTagTagIdAndTodoId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodoFilter
  ): TagTodosByTodosTagTagIdAndTodoIdManyToManyConnection!
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""A connection to a list of `TodosTag` values."""
type TodosTagsConnection {
  """A list of `TodosTag` objects."""
  nodes: [TodosTag]!

  """
  A list of edges which contains the `TodosTag` and cursor to aid in pagination.
  """
  edges: [TodosTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TodosTag` you could get from the connection."""
  totalCount: Int!
}

type TodosTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  todoId: UUID
  tagId: UUID

  """Reads a single `Todo` that is related to this `TodosTag`."""
  todo: Todo

  """Reads a single `Tag` that is related to this `TodosTag`."""
  tag: Tag
}

type Todo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  content: String
  title: String
  status: TodoStatus
  createdAt: Datetime
  updatedAt: Datetime
  userId: UUID

  """Reads a single `User` that is related to this `Todo`."""
  user: User

  """Reads and enables pagination through a set of `TodosTag`."""
  todosTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodosTag`."""
    orderBy: [TodosTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodosTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodosTagFilter
  ): TodosTagsConnection!

  """Reads and enables pagination through a set of `Tag`."""
  tagsByTodosTagTodoIdAndTagId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter
  ): TodoTagsByTodosTagTodoIdAndTagIdManyToManyConnection!
}

enum TodoStatus {
  TO_DO
  DOING
  DONE
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String

  """Reads and enables pagination through a set of `Todo`."""
  todos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodoFilter
  ): TodosConnection!
}

"""A connection to a list of `Todo` values."""
type TodosConnection {
  """A list of `Todo` objects."""
  nodes: [Todo]!

  """
  A list of edges which contains the `Todo` and cursor to aid in pagination.
  """
  edges: [TodosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Todo` you could get from the connection."""
  totalCount: Int!
}

"""A `Todo` edge in the connection."""
type TodosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Todo` at the end of the edge."""
  node: Todo
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Todo`."""
enum TodosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CONTENT_ASC
  CONTENT_DESC
  TITLE_ASC
  TITLE_DESC
  STATUS_ASC
  STATUS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Todo` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TodoCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `status` field."""
  status: TodoStatus

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `Todo` object types. All fields are combined with a logical ‘and.’
"""
input TodoFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `status` field."""
  status: TodoStatusFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter

  """Filter by the object’s `todosTags` relation."""
  todosTags: TodoToManyTodosTagFilter

  """Some related `todosTags` exist."""
  todosTagsExist: Boolean

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """A related `user` exists."""
  userExists: Boolean

  """Checks for all expressions in this list."""
  and: [TodoFilter!]

  """Checks for any expressions in this list."""
  or: [TodoFilter!]

  """Negates the expression."""
  not: TodoFilter
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against TodoStatus fields. All fields are combined with a logical ‘and.’
"""
input TodoStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: TodoStatus

  """Not equal to the specified value."""
  notEqualTo: TodoStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: TodoStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: TodoStatus

  """Included in the specified list."""
  in: [TodoStatus!]

  """Not included in the specified list."""
  notIn: [TodoStatus!]

  """Less than the specified value."""
  lessThan: TodoStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: TodoStatus

  """Greater than the specified value."""
  greaterThan: TodoStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: TodoStatus
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A filter to be used against many `TodosTag` object types. All fields are combined with a logical ‘and.’
"""
input TodoToManyTodosTagFilter {
  """
  Every related `TodosTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TodosTagFilter

  """
  Some related `TodosTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TodosTagFilter

  """
  No related `TodosTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TodosTagFilter
}

"""
A filter to be used against `TodosTag` object types. All fields are combined with a logical ‘and.’
"""
input TodosTagFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `todoId` field."""
  todoId: UUIDFilter

  """Filter by the object’s `tagId` field."""
  tagId: UUIDFilter

  """Filter by the object’s `todo` relation."""
  todo: TodoFilter

  """A related `todo` exists."""
  todoExists: Boolean

  """Filter by the object’s `tag` relation."""
  tag: TagFilter

  """A related `tag` exists."""
  tagExists: Boolean

  """Checks for all expressions in this list."""
  and: [TodosTagFilter!]

  """Checks for any expressions in this list."""
  or: [TodosTagFilter!]

  """Negates the expression."""
  not: TodosTagFilter
}

"""
A filter to be used against `Tag` object types. All fields are combined with a logical ‘and.’
"""
input TagFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `todosTags` relation."""
  todosTags: TagToManyTodosTagFilter

  """Some related `todosTags` exist."""
  todosTagsExist: Boolean

  """Checks for all expressions in this list."""
  and: [TagFilter!]

  """Checks for any expressions in this list."""
  or: [TagFilter!]

  """Negates the expression."""
  not: TagFilter
}

"""
A filter to be used against many `TodosTag` object types. All fields are combined with a logical ‘and.’
"""
input TagToManyTodosTagFilter {
  """
  Every related `TodosTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TodosTagFilter

  """
  Some related `TodosTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TodosTagFilter

  """
  No related `TodosTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TodosTagFilter
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `todos` relation."""
  todos: UserToManyTodoFilter

  """Some related `todos` exist."""
  todosExist: Boolean

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""
A filter to be used against many `Todo` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyTodoFilter {
  """
  Every related `Todo` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TodoFilter

  """
  Some related `Todo` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TodoFilter

  """
  No related `Todo` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TodoFilter
}

"""Methods to use when ordering `TodosTag`."""
enum TodosTagsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TODO_ID_ASC
  TODO_ID_DESC
  TAG_ID_ASC
  TAG_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TodosTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TodosTagCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `todoId` field."""
  todoId: UUID

  """Checks for equality with the object’s `tagId` field."""
  tagId: UUID
}

"""A connection to a list of `Tag` values, with data from `TodosTag`."""
type TodoTagsByTodosTagTodoIdAndTagIdManyToManyConnection {
  """A list of `Tag` objects."""
  nodes: [Tag]!

  """
  A list of edges which contains the `Tag`, info from the `TodosTag`, and the cursor to aid in pagination.
  """
  edges: [TodoTagsByTodosTagTodoIdAndTagIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

"""A `Tag` edge in the connection, with data from `TodosTag`."""
type TodoTagsByTodosTagTodoIdAndTagIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag

  """Reads and enables pagination through a set of `TodosTag`."""
  todosTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodosTag`."""
    orderBy: [TodosTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodosTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodosTagFilter
  ): TodosTagsConnection!
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A `TodosTag` edge in the connection."""
type TodosTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TodosTag` at the end of the edge."""
  node: TodosTag
}

"""A connection to a list of `Todo` values, with data from `TodosTag`."""
type TagTodosByTodosTagTagIdAndTodoIdManyToManyConnection {
  """A list of `Todo` objects."""
  nodes: [Todo]!

  """
  A list of edges which contains the `Todo`, info from the `TodosTag`, and the cursor to aid in pagination.
  """
  edges: [TagTodosByTodosTagTagIdAndTodoIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Todo` you could get from the connection."""
  totalCount: Int!
}

"""A `Todo` edge in the connection, with data from `TodosTag`."""
type TagTodosByTodosTagTagIdAndTodoIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Todo` at the end of the edge."""
  node: Todo

  """Reads and enables pagination through a set of `TodosTag`."""
  todosTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodosTag`."""
    orderBy: [TodosTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodosTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodosTagFilter
  ): TodosTagsConnection!
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Tag`."""
  createTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTagInput!
  ): CreateTagPayload

  """Creates a single `Todo`."""
  createTodo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTodoInput!
  ): CreateTodoPayload

  """Creates a single `TodosTag`."""
  createTodosTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTodosTagInput!
  ): CreateTodosTagPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `Tag` using its globally unique id and a patch."""
  updateTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagByNodeIdInput!
  ): UpdateTagPayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagInput!
  ): UpdateTagPayload

  """Updates a single `Todo` using its globally unique id and a patch."""
  updateTodoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoByNodeIdInput!
  ): UpdateTodoPayload

  """Updates a single `Todo` using a unique key and a patch."""
  updateTodo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoInput!
  ): UpdateTodoPayload

  """Updates a single `TodosTag` using its globally unique id and a patch."""
  updateTodosTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodosTagByNodeIdInput!
  ): UpdateTodosTagPayload

  """Updates a single `TodosTag` using a unique key and a patch."""
  updateTodosTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodosTagInput!
  ): UpdateTodosTagPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Deletes a single `Tag` using its globally unique id."""
  deleteTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagByNodeIdInput!
  ): DeleteTagPayload

  """Deletes a single `Tag` using a unique key."""
  deleteTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagInput!
  ): DeleteTagPayload

  """Deletes a single `Todo` using its globally unique id."""
  deleteTodoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoByNodeIdInput!
  ): DeleteTodoPayload

  """Deletes a single `Todo` using a unique key."""
  deleteTodo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoInput!
  ): DeleteTodoPayload

  """Deletes a single `TodosTag` using its globally unique id."""
  deleteTodosTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodosTagByNodeIdInput!
  ): DeleteTodosTagPayload

  """Deletes a single `TodosTag` using a unique key."""
  deleteTodosTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodosTagInput!
  ): DeleteTodosTagPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload
  cusCreateUpdateTodo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CusCreateUpdateTodoInput!
  ): CusCreateUpdateTodoPayload
}

"""The output of our create `Tag` mutation."""
type CreateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was created by this mutation."""
  tag: Tag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the create `Tag` mutation."""
input CreateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tag` to be created by this mutation."""
  tag: TagInput!
}

"""An input for mutations affecting `Tag`"""
input TagInput {
  id: UUID
  name: String!
}

"""The output of our create `Todo` mutation."""
type CreateTodoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Todo` that was created by this mutation."""
  todo: Todo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Todo`."""
  user: User

  """An edge for our `Todo`. May be used by Relay 1."""
  todoEdge(
    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodosEdge
}

"""All input for the create `Todo` mutation."""
input CreateTodoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Todo` to be created by this mutation."""
  todo: TodoInput!
}

"""An input for mutations affecting `Todo`"""
input TodoInput {
  id: UUID
  content: String
  title: String
  status: TodoStatus
  createdAt: Datetime
  updatedAt: Datetime
  userId: UUID
}

"""The output of our create `TodosTag` mutation."""
type CreateTodosTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodosTag` that was created by this mutation."""
  todosTag: TodosTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Todo` that is related to this `TodosTag`."""
  todo: Todo

  """Reads a single `Tag` that is related to this `TodosTag`."""
  tag: Tag

  """An edge for our `TodosTag`. May be used by Relay 1."""
  todosTagEdge(
    """The method to use when ordering `TodosTag`."""
    orderBy: [TodosTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodosTagsEdge
}

"""All input for the create `TodosTag` mutation."""
input CreateTodosTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TodosTag` to be created by this mutation."""
  todosTag: TodosTagInput!
}

"""An input for mutations affecting `TodosTag`"""
input TodosTagInput {
  id: UUID
  todoId: UUID
  tagId: UUID
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: UUID
  name: String
}

"""The output of our update `Tag` mutation."""
type UpdateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was updated by this mutation."""
  tag: Tag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `updateTagByNodeId` mutation."""
input UpdateTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  patch: TagPatch!
}

"""Represents an update to a `Tag`. Fields that are set will be updated."""
input TagPatch {
  id: UUID
  name: String
}

"""All input for the `updateTag` mutation."""
input UpdateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  patch: TagPatch!
  id: UUID!
}

"""The output of our update `Todo` mutation."""
type UpdateTodoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Todo` that was updated by this mutation."""
  todo: Todo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Todo`."""
  user: User

  """An edge for our `Todo`. May be used by Relay 1."""
  todoEdge(
    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodosEdge
}

"""All input for the `updateTodoByNodeId` mutation."""
input UpdateTodoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Todo` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Todo` being updated.
  """
  patch: TodoPatch!
}

"""Represents an update to a `Todo`. Fields that are set will be updated."""
input TodoPatch {
  id: UUID
  content: String
  title: String
  status: TodoStatus
  createdAt: Datetime
  updatedAt: Datetime
  userId: UUID
}

"""All input for the `updateTodo` mutation."""
input UpdateTodoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Todo` being updated.
  """
  patch: TodoPatch!
  id: UUID!
}

"""The output of our update `TodosTag` mutation."""
type UpdateTodosTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodosTag` that was updated by this mutation."""
  todosTag: TodosTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Todo` that is related to this `TodosTag`."""
  todo: Todo

  """Reads a single `Tag` that is related to this `TodosTag`."""
  tag: Tag

  """An edge for our `TodosTag`. May be used by Relay 1."""
  todosTagEdge(
    """The method to use when ordering `TodosTag`."""
    orderBy: [TodosTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodosTagsEdge
}

"""All input for the `updateTodosTagByNodeId` mutation."""
input UpdateTodosTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TodosTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TodosTag` being updated.
  """
  patch: TodosTagPatch!
}

"""
Represents an update to a `TodosTag`. Fields that are set will be updated.
"""
input TodosTagPatch {
  id: UUID
  todoId: UUID
  tagId: UUID
}

"""All input for the `updateTodosTag` mutation."""
input UpdateTodosTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TodosTag` being updated.
  """
  patch: TodosTagPatch!
  id: UUID!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: UUID
  name: String
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  id: UUID!
}

"""The output of our delete `Tag` mutation."""
type DeleteTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was deleted by this mutation."""
  tag: Tag
  deletedTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `deleteTagByNodeId` mutation."""
input DeleteTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTag` mutation."""
input DeleteTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Todo` mutation."""
type DeleteTodoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Todo` that was deleted by this mutation."""
  todo: Todo
  deletedTodoNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Todo`."""
  user: User

  """An edge for our `Todo`. May be used by Relay 1."""
  todoEdge(
    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodosEdge
}

"""All input for the `deleteTodoByNodeId` mutation."""
input DeleteTodoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Todo` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTodo` mutation."""
input DeleteTodoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `TodosTag` mutation."""
type DeleteTodosTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodosTag` that was deleted by this mutation."""
  todosTag: TodosTag
  deletedTodosTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Todo` that is related to this `TodosTag`."""
  todo: Todo

  """Reads a single `Tag` that is related to this `TodosTag`."""
  tag: Tag

  """An edge for our `TodosTag`. May be used by Relay 1."""
  todosTagEdge(
    """The method to use when ordering `TodosTag`."""
    orderBy: [TodosTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodosTagsEdge
}

"""All input for the `deleteTodosTagByNodeId` mutation."""
input DeleteTodosTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TodosTag` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTodosTag` mutation."""
input DeleteTodosTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our `cusCreateUpdateTodo` mutation."""
type CusCreateUpdateTodoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  todo: Todo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Todo`."""
  user: User

  """An edge for our `Todo`. May be used by Relay 1."""
  todoEdge(
    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodosEdge
}

"""All input for the `cusCreateUpdateTodo` mutation."""
input CusCreateUpdateTodoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  iTodo: TodoInput
  tagsId: [UUID]
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their
description, they are added for each field in the `Query` type. When you
subscribe to a live query field, the selection set will be evaluated and sent to
the client, and then most things\* that would cause the output of the selection
set to change will trigger the selection set to be re-evaluated and the results
to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified
server-side event occurs. This makes them a lot more efficient than Live
Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form. (live)
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. (live)
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`. (live)"""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Tag`. (live)"""
  tags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter
  ): TagsConnection

  """Reads and enables pagination through a set of `Todo`. (live)"""
  todos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodoFilter
  ): TodosConnection

  """Reads and enables pagination through a set of `TodosTag`. (live)"""
  todosTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodosTag`."""
    orderBy: [TodosTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodosTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodosTagFilter
  ): TodosTagsConnection

  """Reads and enables pagination through a set of `User`. (live)"""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """ (live)"""
  tag(id: UUID!): Tag

  """ (live)"""
  todo(id: UUID!): Todo

  """ (live)"""
  todosTag(id: UUID!): TodosTag

  """ (live)"""
  user(id: UUID!): User

  """Example of function with sql (live)"""
  searchTodo(
    search: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TodoFilter
  ): TodosConnection

  """Reads a single `Tag` using its globally unique `ID`. (live)"""
  tagByNodeId(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    nodeId: ID!
  ): Tag

  """Reads a single `Todo` using its globally unique `ID`. (live)"""
  todoByNodeId(
    """The globally unique `ID` to be used in selecting a single `Todo`."""
    nodeId: ID!
  ): Todo

  """Reads a single `TodosTag` using its globally unique `ID`. (live)"""
  todosTagByNodeId(
    """The globally unique `ID` to be used in selecting a single `TodosTag`."""
    nodeId: ID!
  ): TodosTag

  """Reads a single `User` using its globally unique `ID`. (live)"""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}
